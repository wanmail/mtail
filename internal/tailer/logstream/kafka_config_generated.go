// Code generated by github.com/wanqian/cspm-go/codegen; DO NOT EDIT.
package logstream

import (
	"strings"
	"time"
	"strconv"
	"net/url"
	"github.com/segmentio/kafka-go"
)


func parseKafkaConfig(u *url.URL, config *kafka.ReaderConfig) error {

	if Brokers := u.Query().Get("Brokers"); Brokers != "" {
		config.Brokers = strings.Split(Brokers, ",")
	}

	if GroupID := u.Query().Get("GroupID"); GroupID != "" {
		config.GroupID = GroupID
	}

	if GroupTopics := u.Query().Get("GroupTopics"); GroupTopics != "" {
		config.GroupTopics = strings.Split(GroupTopics, ",")
	}

	if Topic := u.Query().Get("Topic"); Topic != "" {
		config.Topic = Topic
	}

	if Partition := u.Query().Get("Partition"); Partition != "" {
		i, err := strconv.Atoi(Partition)
		if err != nil {
			return err
		}
		config.Partition = i
	}

  // Dialer is not supported

	if QueueCapacity := u.Query().Get("QueueCapacity"); QueueCapacity != "" {
		i, err := strconv.Atoi(QueueCapacity)
		if err != nil {
			return err
		}
		config.QueueCapacity = i
	}

	if MinBytes := u.Query().Get("MinBytes"); MinBytes != "" {
		i, err := strconv.Atoi(MinBytes)
		if err != nil {
			return err
		}
		config.MinBytes = i
	}

	if MaxBytes := u.Query().Get("MaxBytes"); MaxBytes != "" {
		i, err := strconv.Atoi(MaxBytes)
		if err != nil {
			return err
		}
		config.MaxBytes = i
	}

	if MaxWait := u.Query().Get("MaxWait"); MaxWait != "" {
		i, err := strconv.Atoi(MaxWait)
		if err != nil {
			return err
		}
		config.MaxWait = time.Second * time.Duration(i)
	}

	if ReadBatchTimeout := u.Query().Get("ReadBatchTimeout"); ReadBatchTimeout != "" {
		i, err := strconv.Atoi(ReadBatchTimeout)
		if err != nil {
			return err
		}
		config.ReadBatchTimeout = time.Second * time.Duration(i)
	}

	if ReadLagInterval := u.Query().Get("ReadLagInterval"); ReadLagInterval != "" {
		i, err := strconv.Atoi(ReadLagInterval)
		if err != nil {
			return err
		}
		config.ReadLagInterval = time.Second * time.Duration(i)
	}

	if HeartbeatInterval := u.Query().Get("HeartbeatInterval"); HeartbeatInterval != "" {
		i, err := strconv.Atoi(HeartbeatInterval)
		if err != nil {
			return err
		}
		config.HeartbeatInterval = time.Second * time.Duration(i)
	}

	if CommitInterval := u.Query().Get("CommitInterval"); CommitInterval != "" {
		i, err := strconv.Atoi(CommitInterval)
		if err != nil {
			return err
		}
		config.CommitInterval = time.Second * time.Duration(i)
	}

	if PartitionWatchInterval := u.Query().Get("PartitionWatchInterval"); PartitionWatchInterval != "" {
		i, err := strconv.Atoi(PartitionWatchInterval)
		if err != nil {
			return err
		}
		config.PartitionWatchInterval = time.Second * time.Duration(i)
	}

	if WatchPartitionChanges := u.Query().Get("WatchPartitionChanges"); WatchPartitionChanges != "" {
		b, err := strconv.ParseBool(WatchPartitionChanges)
		if err != nil {
			return err
		}
		config.WatchPartitionChanges = b
	}

	if SessionTimeout := u.Query().Get("SessionTimeout"); SessionTimeout != "" {
		i, err := strconv.Atoi(SessionTimeout)
		if err != nil {
			return err
		}
		config.SessionTimeout = time.Second * time.Duration(i)
	}

	if RebalanceTimeout := u.Query().Get("RebalanceTimeout"); RebalanceTimeout != "" {
		i, err := strconv.Atoi(RebalanceTimeout)
		if err != nil {
			return err
		}
		config.RebalanceTimeout = time.Second * time.Duration(i)
	}

	if JoinGroupBackoff := u.Query().Get("JoinGroupBackoff"); JoinGroupBackoff != "" {
		i, err := strconv.Atoi(JoinGroupBackoff)
		if err != nil {
			return err
		}
		config.JoinGroupBackoff = time.Second * time.Duration(i)
	}

	if RetentionTime := u.Query().Get("RetentionTime"); RetentionTime != "" {
		i, err := strconv.Atoi(RetentionTime)
		if err != nil {
			return err
		}
		config.RetentionTime = time.Second * time.Duration(i)
	}

	if StartOffset := u.Query().Get("StartOffset"); StartOffset != "" {
		i, err := strconv.Atoi(StartOffset)
		if err != nil {
			return err
		}
		config.StartOffset = int64(i)
	}

	if ReadBackoffMin := u.Query().Get("ReadBackoffMin"); ReadBackoffMin != "" {
		i, err := strconv.Atoi(ReadBackoffMin)
		if err != nil {
			return err
		}
		config.ReadBackoffMin = time.Second * time.Duration(i)
	}

	if ReadBackoffMax := u.Query().Get("ReadBackoffMax"); ReadBackoffMax != "" {
		i, err := strconv.Atoi(ReadBackoffMax)
		if err != nil {
			return err
		}
		config.ReadBackoffMax = time.Second * time.Duration(i)
	}

  // Logger is not supported

  // ErrorLogger is not supported

	if IsolationLevel := u.Query().Get("IsolationLevel"); IsolationLevel != "" {
		i, err := strconv.Atoi(IsolationLevel)
		if err != nil {
			return err
		}
		config.IsolationLevel = kafka.IsolationLevel(i)
	}

	if MaxAttempts := u.Query().Get("MaxAttempts"); MaxAttempts != "" {
		i, err := strconv.Atoi(MaxAttempts)
		if err != nil {
			return err
		}
		config.MaxAttempts = i
	}

	if OffsetOutOfRangeError := u.Query().Get("OffsetOutOfRangeError"); OffsetOutOfRangeError != "" {
		b, err := strconv.ParseBool(OffsetOutOfRangeError)
		if err != nil {
			return err
		}
		config.OffsetOutOfRangeError = b
	}

  return nil
}
